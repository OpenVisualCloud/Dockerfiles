
# This file is automatically generated from .m4 template.
# To update, modify the template and regenerate.
FROM centos:centos7 AS build


RUN mkdir -p /opt/build && mkdir -p /opt/dist

ENV PKG_CONFIG_PATH=/usr/local/lib64/pkgconfig

RUN yum install -y wget make autoconf diffutils automake gcc-c++ epel-release

ARG LIBOGG_REPO=https://downloads.xiph.org/releases/ogg/libogg-1.3.4.tar.gz

RUN cd /opt/build && \
    wget -O - ${LIBOGG_REPO} | tar xz && \
    cd libogg-1.3.4 && \
    ./configure --prefix=/usr/local --libdir=/usr/local/lib64 --enable-shared && \
    make -j$(nproc) && \
    make install DESTDIR=/opt/dist && \
    make install

RUN yum install -y wget make autoconf diffutils automake

ARG LIBVORBIS_REPO=https://downloads.xiph.org/releases/vorbis/libvorbis-1.3.7.tar.gz

RUN cd /opt/build && \
    wget -O - ${LIBVORBIS_REPO} | tar xz && \
    cd libvorbis-1.3.7 && \
    ./configure --prefix=/usr/local --libdir=/usr/local/lib64 --enable-shared && \
    make -j$(nproc) && \
    make install DESTDIR=/opt/dist && \
    make install

RUN yum install -y wget gcc-c++ autoconf libtool make automake

ARG LIBFDKAAC_REPO=https://github.com/mstorsjo/fdk-aac/archive/v0.1.6.tar.gz
RUN cd /opt/build && \
    wget -O - ${LIBFDKAAC_REPO} | tar xz && \
    cd fdk-aac-0.1.6 && \
    ./autogen.sh && \
    ./configure --prefix=/usr/local --libdir=/usr/local/lib64 --enable-shared && \
    make -j$(nproc) && \
    make install DESTDIR=/opt/dist && \
    make install

RUN yum install -y wget autoconf libtool make

ARG LIBOPUS_REPO=https://archive.mozilla.org/pub/opus/opus-1.3.1.tar.gz
RUN cd /opt/build && \
    wget -O - ${LIBOPUS_REPO} | tar xz && \
    cd opus-1.3.1 && \
    ./configure --prefix=/usr/local --libdir=/usr/local/lib64 --enable-shared && \
    make -j$(nproc) && \
    make install DESTDIR=/opt/dist && \
    make install

RUN yum install -y wget tar gcc-c++ make bzip2

ARG NASM_REPO=https://www.nasm.us/pub/nasm/releasebuilds/2.15.05/nasm-2.15.05.tar.bz2
RUN cd /opt/build && \
    wget -O - ${NASM_REPO} | tar xj && \
    cd nasm-2.15.05 && \
    ./autogen.sh && \
    ./configure --prefix=/usr/local --libdir=/usr/local/lib64 && \
     make -j$(nproc) && \
     make install

RUN yum install -y git cmake make autoconf diffutils

ARG LIBVPX_REPO=https://chromium.googlesource.com/webm/libvpx.git
RUN cd /opt/build && \
    git clone ${LIBVPX_REPO} -b v1.8.2 --depth 1 && \
    cd libvpx && \
    ./configure --prefix=/usr/local --libdir=/usr/local/lib64 --enable-shared --disable-examples --disable-unit-tests --enable-vp9-highbitdepth --as=nasm && \
    make -j$(nproc) && \
    make install DESTDIR=/opt/dist && \
    make install

RUN yum install -y git cmake3 make

ARG LIBAOM_REPO=https://aomedia.googlesource.com/aom
RUN cd /opt/build && \
    git clone ${LIBAOM_REPO} -b v2.0.0 --depth 1 && \
    cd aom/build && \
    cmake3 -DBUILD_SHARED_LIBS=ON -DENABLE_NASM=ON -DENABLE_TESTS=OFF -DENABLE_DOCS=OFF -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_INSTALL_LIBDIR=lib64 .. && \
    make -j$(nproc) && \
    make install DESTDIR=/opt/dist && \
    make install

RUN yum install -y git cmake make autoconf diffutils

ARG LIBX264_REPO=https://github.com/mirror/x264
RUN cd /opt/build && \
    git clone ${LIBX264_REPO} -b stable --depth 1 && \
    cd x264 && \
    ./configure --prefix=/usr/local --libdir=/usr/local/lib64 --enable-shared && \
    make -j$(nproc) && \
    make install DESTDIR=/opt/dist && \
    make install

RUN yum install -y wget tar gcc-c++ make
ARG YASM_REPO=https://github.com/OpenVisualCloud/Dockerfiles-Resources/raw/master/yasm-1.3.0.tar.gz
RUN cd /opt/build && \
    wget -O - ${YASM_REPO} | tar xz
RUN cd /opt/build/yasm-1.3.0 && \
    # TODO remove the line below whether no other component inside this project requires it.
    # `sed -i "s/) ytasm.*/)/" Makefile.in' && \
    ./configure --prefix=/usr/local --libdir=/usr/local/lib64 && \
    make -j $(nproc) && \
    make install

RUN yum install -y cmake make numactl-devel libpciaccess-devel

ARG LIBX265_REPO=https://github.com/videolan/x265/archive/3.3.tar.gz
RUN cd /opt/build && \
    wget -O - ${LIBX265_REPO} | tar xz && \
    cd x265-3.3/build/linux && \
    cmake -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=/usr/local -DLIB_INSTALL_DIR=/usr/local/lib64 ../../source && \
    make -j$(nproc) && \
    make install DESTDIR=/opt/dist && \
    make install

RUN yum install -y meson wget tar gcc-c++
ARG DAV1D_REPO=https://code.videolan.org/videolan/dav1d/-/archive/0.7.1/dav1d-0.7.1.tar.gz
RUN cd /opt/build && \
  wget -O - ${DAV1D_REPO} | tar xz
RUN cd /opt/build/dav1d-0.7.1 && \
  meson build --prefix=/usr/local --libdir /usr/local/lib64 --buildtype=plain && \
  cd build && \
  ninja install && \
  DESTDIR=/opt/dist ninja install

RUN yum install -y wget tar gcc-c++ make git cmake3
ARG SVT_HEVC_REPO=https://github.com/OpenVisualCloud/SVT-HEVC
RUN cd /opt/build && \
    git clone ${SVT_HEVC_REPO}
RUN cd /opt/build/SVT-HEVC/Build/linux && \
    git checkout v1.5.0 && \
    cmake3 -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_INSTALL_LIBDIR=/usr/local/lib64 -DCMAKE_ASM_NASM_COMPILER=yasm ../.. && \
    make -j $(nproc) && \
    make install DESTDIR=/opt/dist && \
    make install

RUN yum install -y wget tar gcc-c++ make git cmake3
ARG SVT_AV1_REPO=https://github.com/AOMediaCodec/SVT-AV1
RUN cd /opt/build && \
    git clone ${SVT_AV1_REPO} -b v0.8.5 --depth 1 && \
    cd SVT-AV1/Build/linux && \
    cmake3 -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_INSTALL_LIBDIR=/usr/local/lib64 -DCMAKE_ASM_NASM_COMPILER=yasm ../.. && \
    make -j $(nproc) && \
    sed -i 's/SvtAv1dec/SvtAv1Dec/' SvtAv1Dec.pc && \
    make install DESTDIR=/opt/dist && \
    make install

RUN yum install -y meson wget tar gcc-c++ glib2-devel bison flex 
ARG GSTCORE_REPO=https://github.com/GStreamer/gstreamer/archive/1.16.2.tar.gz
RUN cd /opt/build && \
    wget -O - ${GSTCORE_REPO} | tar xz
RUN cd /opt/build/gstreamer-1.16.2 && \
    meson build --libdir=/usr/local/lib64 --libexecdir=/usr/local/lib64 \
    --prefix=/usr/local --buildtype=plain \
    -Dgtk_doc=disabled && \
    cd build && \
    ninja install && \
    DESTDIR=/opt/dist ninja install

RUN yum install -y meson wget tar gcc-c++ glib2-devel bison flex libX11-devel libXv-devel libXt-devel alsa-lib-devel pango-devel libtheora libvisual mesa-libGL-devel
ARG GSTBASE_REPO=https://github.com/GStreamer/gst-plugins-base/archive/1.16.2.tar.gz
RUN cd /opt/build && \
    wget -O - ${GSTBASE_REPO} | tar xz
RUN cd /opt/build/gst-plugins-base-1.16.2 && \
    meson build --libdir=/usr/local/lib64 --libexecdir=/usr/local/lib64 \
    --prefix=/usr/local --buildtype=plain \
    -Dgtk_doc=disabled && \
    cd build && \
    ninja install && \
    DESTDIR=/opt/dist ninja install

RUN yum install -y git meson wget tar gcc-c++ glib2-devel bison flex libX11-devel libXv-devel libXt-devel gdk-pixbuf2-devel libjpeg-turbo-devel libpng-devel zlib-devel libsoup-devel 
ARG GSTGOOD_REPO=https://github.com/GStreamer/gst-plugins-good/archive/1.16.2.tar.gz
RUN cd /opt/build && \
    wget -O - ${GSTGOOD_REPO} | tar xz
RUN cd /opt/build/gst-plugins-good-1.16.2 && \
    meson build --libdir=/usr/local/lib64 --libexecdir=/usr/local/lib64 \
    --prefix=/usr/local --buildtype=plain \
    -Dgtk_doc=disabled && \
    cd build && \
    ninja install && \
    DESTDIR=/opt/dist ninja install

RUN yum install -y meson wget tar gcc-c++ glib2-devel bison flex openssl libcurl-devel librtmp-devel mjpegtools libde265-devel
ARG GSTBAD_REPO=https://github.com/GStreamer/gst-plugins-bad/archive/1.16.2.tar.gz
RUN cd /opt/build && \
    wget -O - ${GSTBAD_REPO} | tar xz
RUN cd /opt/build/gst-plugins-bad-1.16.2 && \
    meson build --libdir=/usr/local/lib64 --libexecdir=/usr/local/lib64 \
    --prefix=/usr/local --buildtype=plain \
    -Dgtk_doc=disabled && \
    cd build && \
    ninja install && \
    DESTDIR=/opt/dist ninja install

RUN yum install -y meson wget tar gcc-c++ glib2-devel bison flex 
ARG GSTUGLY_REPO=https://github.com/GStreamer/gst-plugins-ugly/archive/1.16.2.tar.gz
RUN cd /opt/build && \
    wget -O - ${GSTUGLY_REPO} | tar xz
RUN cd /opt/build/gst-plugins-ugly-1.16.2 && \
    meson build --libdir=/usr/local/lib64 --libexecdir=/usr/local/lib64 \
    --prefix=/usr/local --buildtype=plain \
    -Dgtk_doc=disabled && \
    cd build && \
    ninja install && \
    DESTDIR=/opt/dist ninja install

RUN yum install -y wget patch libv4l-devel libass-devel freetype-devel 

ARG FFMPEG_REPO=https://github.com/FFmpeg/FFmpeg/archive/n4.2.2.tar.gz
RUN cd /opt/build && \
    wget -O - ${FFMPEG_REPO} | tar xz


ARG FFMPEG_PATCH_SVT_AV1_REPO=https://github.com/AOMediaCodec/SVT-AV1/archive/v0.8.4.tar.gz
RUN cd /opt/build && \
    wget -O - ${FFMPEG_PATCH_SVT_AV1_REPO} | tar xz && \
    cd /opt/build/FFmpeg-n4.2.2 && \
    patch -p1 < ../SVT-AV1-0.8.4/ffmpeg_plugin/0001-Add-ability-for-ffmpeg-to-run-svt-av1.patch || true

RUN cd /opt/build/FFmpeg-n4.2.2 && \
    patch -p1 < /opt/build/SVT-HEVC/ffmpeg_plugin/0001-lavc-svt_hevc-add-libsvt-hevc-encoder-wrapper.patch || true

RUN cd /opt/build/FFmpeg-n4.2.2 && \
    ./configure --prefix=/usr/local --libdir=/usr/local/lib64 --enable-shared --disable-static --disable-doc --disable-htmlpages \
    --disable-manpages --disable-podpages --disable-txtpages \
    --enable-gpl     --enable-nonfree     --enable-libass     --enable-libfreetype     --disable-xlib --disable-sdl2             --disable-vaapi     --enable-libv4l2 --enable-indev=v4l2         --enable-libfdk-aac     --enable-libopus     --enable-libvpx     --enable-libvorbis     --enable-libx264     --enable-libx265     --enable-libsvtav1     --enable-libsvthevc     --enable-libaom     --enable-libdav1d     && make -j$(nproc) && \
    make install DESTDIR=/opt/dist && \
    make install

RUN yum install -y wget tar gcc-c++ meson
ARG GSTLIBAV_REPO=https://github.com/GStreamer/gst-libav/archive/1.16.2.tar.gz
RUN cd /opt/build && \
    wget -O - ${GSTLIBAV_REPO} | tar xz
RUN cd /opt/build/gst-libav-1.16.2 && \
    meson build --libdir=/usr/local/lib64 --libexecdir=/usr/local/lib64 \
    --prefix=/usr/local --buildtype=plain \
    -Dgtk_doc=disabled && \
    cd build && \
    ninja install && \
    DESTDIR=/opt/dist ninja install

RUN yum install -y cmake gcc gcc-c++ make wget
ARG OPENCV_REPO=https://github.com/opencv/opencv/archive/4.4.0.tar.gz
RUN cd /opt/build && \
  wget -O - ${OPENCV_REPO} | tar xz
# TODO: file a bug against opencv since they do not accept full libdir
RUN cd /opt/build/opencv-4.4.0 && mkdir build && cd build && \
  cmake \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=/usr/local \
    -DCMAKE_INSTALL_LIBDIR=lib64 \
    -DOPENCV_GENERATE_PKGCONFIG=ON \
    -DBUILD_DOCS=OFF \
    -DBUILD_EXAMPLES=OFF \
    -DBUILD_PERF_TESTS=OFF \
    -DBUILD_TESTS=OFF \
    .. && \
  make -j "$(nproc)" && \
  make install DESTDIR=/opt/dist && \
  make install


ARG DLDT_REPO=https://github.com/openvinotoolkit/openvino.git

RUN cd /opt/build && git clone -b 2021.1 ${DLDT_REPO} && \
  cd openvino && \
  git submodule update --init --recursive && \
  sed -i s/-Werror//g $(grep -ril Werror inference-engine/thirdparty/) && \
  mkdir build && \
  cd build && \
  cmake \
    -DCMAKE_INSTALL_PREFIX=PREFIX_BUILD/dldt \
    -DENABLE_GNA=OFF \
    -DENABLE_VPU=OFF \
    -DENABLE_OPENCV=OFF \
    -DTREAT_WARNING_AS_ERROR=OFF \
    -DNGRAPH_WARNINGS_AS_ERRORS=OFF \
    -DENABLE_MKL_DNN=ON \
    -DENABLE_CLDNN=ON \
    -DENABLE_TESTS=OFF \
    -DBUILD_TESTS=OFF \
    -DNGRAPH_UNIT_TEST_ENABLE=OFF \
    -DNGRAPH_TEST_UTIL_ENABLE=OFF \
    .. && \
  make -j $(nproc) && \
  rm -rf ../bin/intel64/Release/lib/libgtest* && \
  rm -rf ../bin/intel64/Release/lib/libgmock* && \
  rm -rf ../bin/intel64/Release/lib/libmock* && \
  rm -rf ../bin/intel64/Release/lib/libtest*

ARG CUSTOM_IE_DIR=/usr/local/dldt/inference-engine
ARG CUSTOM_IE_LIBDIR=${CUSTOM_IE_DIR}/lib/intel64
ENV CUSTOM_DLDT=${CUSTOM_IE_DIR}

RUN cd /opt/build && \
  mkdir -p ${CUSTOM_IE_DIR}/include && \
  mkdir -p /opt/dist/${CUSTOM_IE_DIR}/include && \
  cp -r openvino/inference-engine/include/* ${CUSTOM_IE_DIR}/include && \
  cp -r openvino/inference-engine/include/* /opt/dist/${CUSTOM_IE_DIR}/include && \
  \
  mkdir -p ${CUSTOM_IE_LIBDIR} && \
  mkdir -p /opt/dist/${CUSTOM_IE_LIBDIR} && \
  cp -r openvino/bin/intel64/Release/lib/* ${CUSTOM_IE_LIBDIR} && \
  cp -r openvino/bin/intel64/Release/lib/* /opt/dist/${CUSTOM_IE_LIBDIR} && \
  \
  mkdir -p ${CUSTOM_IE_DIR}/src && \
  mkdir -p /opt/dist/${CUSTOM_IE_DIR}/src && \
  cp -r openvino/inference-engine/src/* ${CUSTOM_IE_DIR}/src/ && \
  cp -r openvino/inference-engine/src/* /opt/dist/${CUSTOM_IE_DIR}/src/ && \
  \
  mkdir -p ${CUSTOM_IE_DIR}/share && \
  mkdir -p /opt/dist/${CUSTOM_IE_DIR}/share && \
  mkdir -p ${CUSTOM_IE_DIR}/external/ \
  mkdir -p /opt/dist/${CUSTOM_IE_DIR}/external && \
  cp -r openvino/build/share/* ${CUSTOM_IE_DIR}/share/ && \
  cp -r openvino/build/share/* /opt/dist/${CUSTOM_IE_DIR}/share/ && \
  cp -r openvino/inference-engine/temp/* ${CUSTOM_IE_DIR}/external/ && \
  cp -r openvino/inference-engine/temp/* /opt/dist/${CUSTOM_IE_DIR}/external/ && \
  \
  mkdir -p "${CUSTOM_IE_LIBDIR}/pkgconfig"

RUN { \
  echo "prefix=${CUSTOM_IE_DIR}"; \
  echo "libdir=${CUSTOM_IE_LIBDIR}"; \
  echo "includedir=${CUSTOM_IE_DIR}/include"; \
  echo ""; \
  echo "Name: DLDT"; \
  echo "Description: Intel Deep Learning Deployment Toolkit"; \
  echo "Version: 5.0"; \
  echo ""; \
  echo "Libs: -L\${libdir} -linference_engine -linference_engine_c_wrapper"; \
  echo "Cflags: -I\${includedir}"; \
  } > ${CUSTOM_IE_LIBDIR}/pkgconfig/dldt.pc

RUN rm -rf openvino

RUN echo "Start cleanup" && \
    rm -rf /opt/dist//usr/local/include && \
    rm -rf /opt/dist//usr/local/share/doc && \
    rm -rf /opt/dist//usr/local/share/gtk-doc && \
    rm -rf /opt/dist//usr/local/share/man && \
    ( find /opt/dist -name "*.a" -exec rm -f {} \; ) && \
    echo "Cleanup done"

FROM centos:centos7
LABEL Description="This is the base image for Gstreamer centos centos7"
LABEL Vendor="Intel Corporation"
WORKDIR /home

# Install
RUN yum install -y numactl-libs libpciaccess glib2 mesa-libEGL libX11 libXv libXt alsa-lib pango libtheora libvisual mesa-libGL gdk-pixbuf2 libjpeg-turbo libpng zlib libsoup openssl librtmp mjpegtools libde265 libass freetype libv4l 

COPY --from=build /opt/dist /
RUN echo "/usr/local/lib64" >> /etc/ld.so.conf.d/all-libs.conf && ldconfig

ENV GST_PLUGIN_PATH=/usr/local/lib64/gstreamer-1.0
ENV GST_PLUGIN_SCANNER=/usr/local/lib64/gstreamer-1.0/gst-plugin-scanner
ARG CUSTOM_IE_DIR=/usr/local/dldt/inference-engine
ARG CUSTOM_IE_LIBDIR=${CUSTOM_IE_DIR}/lib/intel64
RUN { \
   echo "${CUSTOM_IE_LIBDIR}"; \
   echo "${CUSTOM_IE_DIR}/external/tbb/lib"; \
   echo "${CUSTOM_IE_DIR}/external/opencv/lib"; \
} > /etc/ld.so.conf.d/dldt.conf
RUN ldconfig
