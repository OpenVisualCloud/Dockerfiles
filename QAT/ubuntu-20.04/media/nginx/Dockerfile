


# This file is automatically generated from .m4 template.
# To update, modify the template and regenerate.
FROM ubuntu:20.04 AS build


RUN mkdir -p /opt/build && mkdir -p /opt/dist

ENV PKG_CONFIG_PATH=/usr/local/lib/pkgconfig



# load qat core
ADD qat.tar.gz /opt/dist/
RUN mkdir -p /opt/intel /opt/dist/opt/intel && \
    ln -s /opt/dist/opt/intel/QAT /opt/intel/QAT

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    wget ca-certificates make gcc libzip-dev && \
  rm -rf /var/lib/apt/lists/*

# load qat-zip
ARG QAT_ZIP_REPO=https://github.com/intel/QATzip/archive/v1.0.1.tar.gz
RUN cd /opt/build && \
    wget -O - ${QAT_ZIP_REPO} | tar xz && \
    cd QATzip* && \
    /bin/bash ./configure LDFLAGS="-Wl,-rpath=/opt/intel/QAT/build" --with-ICP_ROOT=/opt/intel/QAT --prefix=/opt/intel/QATzip && \
    make -j8 && \
    make install && \
    (cd /opt/intel/QATzip/lib64 && ln -s libqatzip.so libqatzip.so.1) && \
    tar cf - /opt/intel/QATzip | (cd /opt/dist && tar xf -)

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates wget tar g++ make libtool autoconf && \
  rm -rf /var/lib/apt/lists/*

# build openssl
ARG OPENSSL_REPO=https://github.com/openssl/openssl/archive/OpenSSL_1_1_1h.tar.gz
RUN cd /opt/build && \
    wget -O - ${OPENSSL_REPO} | tar xz && \
    cd openssl-OpenSSL_1_1_1h && \
    ./config no-ssl3 shared --prefix=/usr/local/ssl --openssldir=/usr/local/ssl -fPIC -Wl,-rpath=/usr/local/ssl/lib && \
    make depend && \
    make -s V=0 && \
    make install DESTDIR=/opt/dist && \
    (cd /opt/dist && mkdir -p ./usr/local/lib/pkgconfig && mv ./usr/local/ssl/lib/pkgconfig/*.pc ./usr/local/lib/pkgconfig/) && \
    make install && \
    (mkdir -p /usr/local/lib/pkgconfig && mv /usr/local/ssl/lib/pkgconfig/*.pc /usr/local/lib/pkgconfig/)

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    wget ca-certificates automake make gcc gawk && \
  rm -rf /var/lib/apt/lists/*

# load qat-engine
ARG QAT_ENGINE_REPO=https://github.com/intel/QAT_Engine/archive/v0.5.42.tar.gz
RUN cd /opt/build && \
    wget -O - ${QAT_ENGINE_REPO} | tar xz && \
    cd QAT_Engine* && \
    ./autogen.sh && \
    export PERL5LIB="$(ls -1 -d /opt/build/openssl-*)" && \
    ./configure --with-qat_dir=/opt/intel/QAT --with-openssl_dir="$PERL5LIB" --with-openssl_install_dir=/usr/local/ssl --enable-upstream_driver --enable-usdm --prefix=/opt/intel/QATengine --enable-qat_debug && \
    make -j8 && \
    make install && \
    tar cf - /usr/local/ssl | (cd /opt/dist && tar xf -)

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates wget && \
  rm -rf /var/lib/apt/lists/*

# build nginx flv
ARG NGINX_FLV_REPO=https://github.com/winshining/nginx-http-flv-module/archive/v1.2.8.tar.gz
RUN cd /opt/build && \
    wget -O - ${NGINX_FLV_REPO} | tar xz



# build nginx upload
ARG NGINX_UPLOAD_REPO=https://github.com/fdintino/nginx-upload-module/archive/2.3.0.tar.gz
RUN cd /opt/build && \
    wget -O - ${NGINX_UPLOAD_REPO} | tar xz

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    wget ca-certificates libpcre3-dev zlib1g-dev libxslt1-dev  && \
  rm -rf /var/lib/apt/lists/*

ARG QAT_NGINX_REPO=https://github.com/intel/asynch_mode_nginx/archive/v0.4.0.tar.gz
RUN wget -O - ${QAT_NGINX_REPO} | tar xz && cd asynch_mode_nginx* && \
    ./configure --with-ld-opt="-Wl,-rpath=/usr/local/ssl/lib,-rpath=/opt/intel/QATengine/lib,-rpath=/opt/intel/QATzip/lib64,-rpath=/opt/intel/QAT/build -L/usr/local/ssl/lib -L/opt/intel/QATzip/lib64 -lqatzip -lz" \
        --with-cc-opt="-DNGX_SECURE_MEM -I/usr/local/ssl/include -I/opt/intel/QATzip/include -Wno-error=deprecated-declarations" \
        --add-dynamic-module=modules/nginx_qatzip_module \
        --add-dynamic-module=modules/nginx_qat_module \
        --prefix=/var/www \
        --sbin-path=/usr/local/sbin/nginx \
        --modules-path=/var/www/modules \
        --conf-path=/etc/nginx/nginx.conf \
        --error-log-path=/var/www/log/error.log \
        --pid-path=/var/www/nginx.pid \
        --lock-path=/var/www/nginx.lock \
        --http-log-path=/var/www/log/access.log \
        --http-client-body-temp-path=/var/www/tmp/client_body \
        --http-proxy-temp-path=/var/www/tmp/proxy \
        --http-fastcgi-temp-path=/var/www/tmp/fastcgi \
        --http-uwsgi-temp-path=/var/www/tmp/uwsgi \
        --http-scgi-temp-path=/var/www/tmp/scgi \
        --user=www-data \
        --group=www-data \
        --with-select_module --with-poll_module \
        --with-threads --with-file-aio \
        --with-http_ssl_module \
        --with-http_v2_module \
        --with-http_realip_module \
        --with-http_addition_module \
        --with-http_xslt_module \
        --with-http_sub_module \
        --with-http_dav_module \
        --with-http_flv_module \
        --with-http_mp4_module \
        --with-http_gunzip_module \
        --with-http_gzip_static_module \
        --with-http_auth_request_module \
        --with-http_random_index_module \
        --with-http_secure_link_module \
        --with-http_degradation_module \
        --with-http_slice_module \
        --with-http_stub_status_module \
        --with-stream \
        --with-stream_ssl_module \
        --add-module=/opt/build/nginx-http-flv-module-1.2.8 \
        --add-module=/opt/build/nginx-upload-module-2.3.0 \
    && make -j8 && \
    make install DESTDIR=/opt/dist

# NGINX Setup
COPY *.conf /opt/dist/etc/nginx/
RUN mkdir -p /opt/dist/var/www/tmp/client_body && \
    mkdir -p /opt/dist/var/www/tmp/proxy && \
    mkdir -p /opt/dist/var/www/tmp/fastcgi && \
    mkdir -p /opt/dist/var/www/tmp/uwsgi && \
    mkdir -p /opt/dist/var/www/tmp/scgi && \
    mkdir -p /opt/dist/var/www/cache && \
    mkdir -p /opt/dist/var/www/dash && \
    mkdir -p /opt/dist/var/www/hls && \
    mkdir -p /opt/dist/var/www/upload && \
    mkdir -p /opt/dist/var/www/html && \
    touch /opt/dist/var/www/html/index.html;

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    openssl && \
  rm -rf /var/lib/apt/lists/*

# Generate a self-certificate for testing purpose
RUN mkdir -p /opt/dist/etc/nginx && \
    printf "US\nOR\nPortland\nOregon\nData Center Group\nIntel Corporation\n%s\nnobody@intel.com\n" "$(hostname)" | openssl req -x509 -nodes -days 30 -newkey rsa:4096 -keyout /opt/dist/etc/nginx/cert.key -out /opt/dist/etc/nginx/cert.crt && \
    chmod 640 /opt/dist/etc/nginx/cert.key && \
    chmod 644 /opt/dist/etc/nginx/cert.crt

# cleanup
RUN rm -rf /opt/dist/usr/local/include && \
    rm -rf /opt/dist/usr/local/lib/pkgconfig && \
    find /opt/dist -name "*.a" -exec rm -f {} \; || echo ""
RUN rm -rf /opt/dist/usr/local/share/doc /opt/dist/usr/local/share/gtk-doc
RUN rm -rf /opt/dist/usr/local/share/man
RUN rm -rf /opt/intel/QATzip/share/man
RUN rm -rf /opt/dist/usr/local/ssl/include
RUN rm -rf /opt/dist/usr/local/ssl/share/man
RUN rm -rf /opt/dist/usr/local/ssl/share/doc

FROM openvisualcloud/xeon-ubuntu2004-media-ffmpeg:21.3
LABEL Description="This is the base image for QAT NGINX ubuntu 20.04"
LABEL Vendor="Intel Corporation"
WORKDIR /home

# Install
RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    libzip5 libxml2 libpcre3 zlib1g libxslt1.1  && \
  rm -rf /var/lib/apt/lists/*

COPY --from=build /opt/dist /
RUN echo "/usr/local/lib" >> /etc/ld.so.conf.d/all-libs.conf && ldconfig



