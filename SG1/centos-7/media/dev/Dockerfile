

# BSD 3-Clause License
#
# Copyright (c) 2021, Intel Corporation
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# This file is automatically generated from .m4 template.
# To update, modify the template and regenerate.
FROM centos:7 AS build

RUN yum install -y -q epel-release centos-release-scl && rm -rf /var/yum/cache/*



RUN mkdir -p /opt/build && mkdir -p /opt/dist

ENV PKG_CONFIG_PATH=/usr/local/lib64/pkgconfig

RUN yum install -y wget gcc-c++ make libcurl-devel zlib-devel

# build cmake
ARG CMAKE_REPO=https://cmake.org/files
RUN cd /opt/build && \
    wget -O - ${CMAKE_REPO}/v3.19/cmake-3.19.4.tar.gz | tar xz && \
    cd cmake-3.19.4 && \
    ./bootstrap --prefix=/usr/local --system-curl && \
    make -j$(nproc) && \
    make install

RUN yum install -y wget make autoconf diffutils automake gcc-c++

# build libogg
ARG LIBOGG_REPO=https://downloads.xiph.org/releases/ogg/libogg-1.3.4.tar.gz

RUN cd /opt/build && \
    wget -O - ${LIBOGG_REPO} | tar xz && \
    cd libogg-1.3.4 && \
    ./configure --prefix=/usr/local --libdir=/usr/local/lib64 --enable-shared && \
    make -j$(nproc) && \
    make install DESTDIR=/opt/dist && \
    make install

RUN yum install -y wget make autoconf diffutils automake

# build libvorbis
ARG LIBVORBIS_REPO=https://downloads.xiph.org/releases/vorbis/libvorbis-1.3.7.tar.gz
RUN cd /opt/build && \
    wget -O - ${LIBVORBIS_REPO} | tar xz && \
    cd libvorbis-1.3.7 && \
    ./configure --prefix=/usr/local --libdir=/usr/local/lib64 --enable-shared && \
    make -j$(nproc) && \
    make install DESTDIR=/opt/dist && \
    make install

RUN yum install -y wget gcc-c++ autoconf libtool make automake

# build libfdkaac
ARG LIBFDKAAC_REPO=https://github.com/mstorsjo/fdk-aac/archive/v0.1.6.tar.gz
RUN cd /opt/build && \
    wget -O - ${LIBFDKAAC_REPO} | tar xz && \
    cd fdk-aac-0.1.6 && \
    ./autogen.sh && \
    ./configure --prefix=/usr/local --libdir=/usr/local/lib64 --enable-shared && \
    make -j$(nproc) && \
    make install DESTDIR=/opt/dist && \
    make install

RUN yum install -y wget autoconf libtool make

# build libopus
ARG LIBOPUS_REPO=https://archive.mozilla.org/pub/opus/opus-1.3.1.tar.gz
RUN cd /opt/build && \
    wget -O - ${LIBOPUS_REPO} | tar xz && \
    cd opus-1.3.1 && \
    ./configure --prefix=/usr/local --libdir=/usr/local/lib64 --enable-shared && \
    make -j$(nproc) && \
    make install DESTDIR=/opt/dist && \
    make install

RUN yum install -y wget tar gcc-c++ make bzip2

# build nasm
ARG NASM_REPO=https://www.nasm.us/pub/nasm/releasebuilds/2.15.05/nasm-2.15.05.tar.bz2
RUN cd /opt/build && \
    wget -O - ${NASM_REPO} | tar xj && \
    cd nasm-2.15.05 && \
    ./autogen.sh && \
    ./configure --prefix=/usr/local --libdir=/usr/local/lib64 && \
     make -j$(nproc) && \
     make install

RUN yum install -y git make autoconf diffutils

# build libvpx
ARG LIBVPX_REPO=https://chromium.googlesource.com/webm/libvpx.git
RUN cd /opt/build && \
    git clone ${LIBVPX_REPO} -b v1.8.2 --depth 1 && \
    cd libvpx && \
    ./configure --prefix=/usr/local --libdir=/usr/local/lib64 --enable-shared --disable-examples --disable-unit-tests --enable-vp9-highbitdepth --as=nasm && \
    make -j$(nproc) && \
    make install DESTDIR=/opt/dist && \
    make install

RUN yum install -y git make

# build libaom
ARG LIBAOM_REPO=https://aomedia.googlesource.com/aom
RUN cd /opt/build && \
    git clone ${LIBAOM_REPO} -b v2.0.0 --depth 1 && \
    cd aom/build && \
    cmake -DBUILD_SHARED_LIBS=ON -DENABLE_NASM=ON -DENABLE_TESTS=OFF -DENABLE_DOCS=OFF -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_INSTALL_LIBDIR=lib64 .. && \
    make -j$(nproc) && \
    make install DESTDIR=/opt/dist && \
    make install

RUN yum install -y git make autoconf diffutils

# build libx264
ARG LIBX264_REPO=https://github.com/mirror/x264
RUN cd /opt/build && \
    git clone ${LIBX264_REPO} -b stable --depth 1 && \
    cd x264 && \
    ./configure --prefix=/usr/local --libdir=/usr/local/lib64 \
        --enable-shared && \
    make -j$(nproc) && \
    make install DESTDIR=/opt/dist && \
    make install

RUN yum install -y wget tar gcc-c++ make

# build yasm
ARG YASM_REPO=https://www.tortall.net/projects/yasm/releases/yasm-1.3.0.tar.gz
RUN cd /opt/build && \
    wget -O - ${YASM_REPO} | tar xz
RUN cd /opt/build/yasm-1.3.0 && \
    # TODO remove the line below whether no other component inside this project requires it.
    # `sed -i "s/) ytasm.*/)/" Makefile.in' && \
    ./configure --prefix=/usr/local --libdir=/usr/local/lib64 && \
    make -j $(nproc) && \
    make install

RUN yum install -y make numactl-devel libpciaccess-devel

# build libx265
ARG LIBX265_REPO=https://github.com/videolan/x265/archive/3.3.tar.gz
RUN cd /opt/build && \
    wget -O - ${LIBX265_REPO} | tar xz && \
    cd x265-3.3/build/linux && \
    cmake -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=/usr/local -DLIB_INSTALL_DIR=/usr/local/lib64 ../../source && \
    make -j$(nproc) && \
    make install DESTDIR=/opt/dist && \
    make install

RUN yum install -y meson wget tar gcc-c++

# build dav1d
ARG DAV1D_REPO=https://code.videolan.org/videolan/dav1d/-/archive/0.7.1/dav1d-0.7.1.tar.gz
RUN cd /opt/build && \
  wget -O - ${DAV1D_REPO} | tar xz
RUN cd /opt/build/dav1d-0.7.1 && \
  meson build --prefix=/usr/local --libdir /usr/local/lib64 --buildtype=plain && \
  cd build && \
  ninja install && \
  DESTDIR=/opt/dist ninja install

RUN yum install -y wget tar gcc-c++ make git 

# build svt-hevc
ARG SVT_HEVC_REPO=https://github.com/OpenVisualCloud/SVT-HEVC
RUN cd /opt/build && \
    git clone -b v1.5.0 --depth 1 ${SVT_HEVC_REPO}
RUN cd /opt/build/SVT-HEVC/Build/linux && \
    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_INSTALL_LIBDIR=/usr/local/lib64 -DCMAKE_ASM_NASM_COMPILER=yasm ../.. && \
    make -j $(nproc) && \
    make install DESTDIR=/opt/dist && \
    make install

RUN yum install -y wget tar gcc-c++ make git 

# build svt av1
ARG SVT_AV1_REPO=https://gitlab.com/AOMediaCodec/SVT-AV1/-/archive/v0.8.6/SVT-AV1-v0.8.6.tar.gz
RUN cd /opt/build && \
    wget -O - ${SVT_AV1_REPO} | tar zx && \
    mv SVT-AV1-v0.8.6 SVT-AV1 && \
    cd SVT-AV1/Build/linux && \
    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_INSTALL_LIBDIR=/usr/local/lib64 -DCMAKE_ASM_NASM_COMPILER=yasm ../.. && \
    make -j $(nproc) && \
    sed -i "s/SvtAv1dec/SvtAv1Dec/" SvtAv1Dec.pc && \
    make install DESTDIR=/opt/dist && \
    make install

RUN yum install -y wget tar gcc-c++ make git devtoolset-9

# build svt vp9
ARG SVT_VP9_REPO=https://github.com/OpenVisualCloud/SVT-VP9
RUN cd /opt/build && \
    git clone ${SVT_VP9_REPO} -b v0.2.1 --depth 1 && \
    cd SVT-VP9/Build/linux && \
    (. /opt/rh/devtoolset-9/enable && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_INSTALL_LIBDIR=/usr/local/lib64 -DCMAKE_ASM_NASM_COMPILER=yasm ../.. && \
    make -j $(nproc) ) && \
    make install DESTDIR=/opt/dist && \
    make install

RUN yum install -y gcc-c++ make wget

# build gmmlib
ARG GMMLIB_REPO=https://github.com/VCDP/gmmlib/archive/intel-media-sg1-pv1.2.tar.gz
RUN cd /opt/build && \
  wget -O - ${GMMLIB_REPO} | tar xz
RUN cd /opt/build/gmmlib-intel-media-sg1-pv1.2 && mkdir build && cd build && \
  cmake -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_INSTALL_LIBDIR=/usr/local/lib64 .. && \
  make -j$(nproc) && \
  make install DESTDIR=/opt/dist && \
  make install

RUN yum install -y automake gcc libdrm-devel libtool make pkg-config wget which libX11-devel libXfixes-devel libXext-devel wayland-devel

# build libva2
ARG LIBVA2_REPO=https://github.com/VCDP/libva/archive/intel-media-sg1-pv1.2.tar.gz
RUN cd /opt/build && \
  wget -O - ${LIBVA2_REPO} | tar xz
RUN cd /opt/build/libva-intel-media-sg1-pv1.2 && \
  ./autogen.sh --prefix=/usr/local --libdir=/usr/local/lib64 && \
  make -j$(nproc) && \
  make install DESTDIR=/opt/dist && \
  make install

RUN yum install -y gcc-c++ libpciaccess-devel make pkg-config wget devtoolset-9

# build media driver
ARG MEDIA_DRIVER_REPO=https://github.com/VCDP/media-driver/archive/intel-media-sg1-pv1.2.tar.gz
RUN cd /opt/build && \
  wget -O - ${MEDIA_DRIVER_REPO} | tar xz
RUN cd /opt/build/media-driver-intel-media-sg1-pv1.2 && mkdir build && cd build && \
  (. /opt/rh/devtoolset-9/enable && cmake -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_INSTALL_LIBDIR=/usr/local/lib64 -DENABLE_PRODUCTION_KMD=ON .. && \
  make -j$(nproc) ) && \
  make install DESTDIR=/opt/dist && \
  make install

RUN yum install -y gcc gcc-c++ make pkg-config wget devtoolset-9

# build media sdk
ARG MSDK_REPO=https://github.com/VCDP/MediaSDK/archive/intel-media-sg1-pv1.2.tar.gz
RUN cd /opt/build && \
    wget -O - ${MSDK_REPO} | tar xz
RUN cd /opt/build/MediaSDK-intel-media-sg1-pv1.2 && \
    mkdir -p build && cd build && \
    (. /opt/rh/devtoolset-9/enable && cmake \
    -DCMAKE_INSTALL_PREFIX=/usr/local \
    -DCMAKE_INSTALL_LIBDIR=/usr/local/lib64 \
    -DBUILD_SAMPLES=no \
    -DBUILD_TUTORIALS=OFF \
    .. && \
    make -j$(nproc)) && \
    make install DESTDIR=/opt/dist && \
    make install

RUN yum install -y wget patch libv4l-devel libass-devel freetype-devel

# build ffmpeg
ARG FFMPEG_REPO=https://github.com/FFmpeg/FFmpeg/archive/n4.2.2.tar.gz
RUN cd /opt/build && \
    wget -O - ${FFMPEG_REPO} | tar xz

ARG FFMPEG_PATCH_SVT_AV1_REPO=https://github.com/AOMediaCodec/SVT-AV1/archive/v0.8.4.tar.gz
RUN cd /opt/build && \
    wget -O - ${FFMPEG_PATCH_SVT_AV1_REPO} | tar xz && \
    cd /opt/build/FFmpeg-n4.2.2 && \
    patch -p1 < ../SVT-AV1-0.8.4/ffmpeg_plugin/0001-Add-ability-for-ffmpeg-to-run-svt-av1.patch || true
RUN cd /opt/build/FFmpeg-n4.2.2 && \
    patch -p1 < /opt/build/SVT-HEVC/ffmpeg_plugin/0001-lavc-svt_hevc-add-libsvt-hevc-encoder-wrapper.patch || true
RUN cd /opt/build/FFmpeg-n4.2.2 && \
    patch -p1 < ../SVT-VP9/ffmpeg_plugin/0001-Add-ability-for-ffmpeg-to-run-svt-vp9.patch || true
ARG FFMPEG_PATCH_VAAPI_REPO=https://github.com/OpenVisualCloud/Dockerfiles-Resources/raw/master/ffmpeg-patch-0041-lavc-vaapi_encode_h265-fix-max_transform_hierarchy_d.tar.gz
RUN cd /opt/build && \
    wget -O - ${FFMPEG_PATCH_VAAPI_REPO} | tar xz && \
    cd /opt/build/FFmpeg-n4.2.2 && \
    patch -p1 < ../0041-lavc-vaapi_encode_h265-fix-max_transform_hierarchy_d.patch || true

ARG FFMPEG_PATCHES_RELEASE_VER=0.2
ARG FFMPEG_PATCHES_RELEASE_URL=https://github.com/VCDP/CDN/archive/v${FFMPEG_PATCHES_RELEASE_VER}.tar.gz
ARG FFMPEG_PATCHES_PATH=/opt/build/CDN-${FFMPEG_PATCHES_RELEASE_VER}

RUN cd /opt/build && \
    wget -O - ${FFMPEG_PATCHES_RELEASE_URL} | tar xz && \
    cd /opt/build/FFmpeg-n4.2.2 && \
    find ${FFMPEG_PATCHES_PATH}/FFmpeg_patches -type f -name *.patch -print0 | sort -z | xargs -t -0 -n 1 patch -p1 -i;

RUN cd /opt/build/FFmpeg-n4.2.2 && \
    ./configure --prefix=/usr/local --libdir=/usr/local/lib64 --enable-shared --disable-static --disable-doc --disable-htmlpages \
    --disable-manpages --disable-podpages --disable-txtpages \
    --extra-cflags=-w     --enable-gpl     --enable-nonfree     --enable-libass     --enable-libfreetype     --disable-xlib --disable-sdl2         --enable-libmfx     --enable-vaapi     --enable-libv4l2 --enable-indev=v4l2         --enable-libfdk-aac     --enable-libopus     --enable-libvpx     --enable-libvorbis     --enable-libx264     --enable-libx265     --enable-libsvtav1     --enable-libsvthevc     --enable-libsvtvp9     --enable-libaom     --enable-libdav1d                     && make -j$(nproc) && \
    make install DESTDIR=/opt/dist && \
    make install

# cleanup
RUN rm -rf /opt/dist/usr/local/include && \
    rm -rf /opt/dist/usr/local/lib64/pkgconfig && \
    find /opt/dist -name "*.a" -exec rm -f {} \; || echo ""
RUN rm -rf /opt/dist/usr/local/share/doc /opt/dist/usr/local/share/gtk-doc
RUN rm -rf /opt/dist/usr/local/share/man

FROM centos:7
LABEL Description="This is the image for FFMPEG and Gstreamer application for media development on centos 7"
LABEL Vendor="Intel Corporation"
WORKDIR /home

RUN yum install -y -q epel-release && rm -rf /var/yum/cache/*


# Install
RUN yum install -y bash numactl-libs libpciaccess libdrm libX11 libXfixes libXext libwayland-client libv4l libass

COPY --from=build /opt/dist /
RUN echo "/usr/local/lib64" >> /etc/ld.so.conf.d/all-libs.conf && ldconfig

ENV LIBVA_DRIVERS_PATH=/usr/local/lib64/dri
ENV LIBVA_DRIVER_NAME=iHD
ENV DISPLAY=:0.0
