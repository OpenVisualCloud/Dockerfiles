

# This file is automatically generated from .m4 template.
# To update, modify the template and regenerate.
FROM ubuntu:18.04 AS build


RUN mkdir -p /opt/build && mkdir -p /opt/dist

ENV PKG_CONFIG_PATH=/usr/local/lib/pkgconfig

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates wget make autoconf automake g++ && \
  rm -rf /var/lib/apt/lists/*

ARG LIBOGG_REPO=https://downloads.xiph.org/releases/ogg/libogg-1.3.4.tar.gz

RUN cd /opt/build && \
    wget -O - ${LIBOGG_REPO} | tar xz && \
    cd libogg-1.3.4 && \
    ./configure --prefix=/usr/local --libdir=/usr/local/lib --enable-shared && \
    make -j$(nproc) && \
    make install DESTDIR=/opt/dist && \
    make install

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates wget make autoconf automake && \
  rm -rf /var/lib/apt/lists/*

ARG LIBVORBIS_REPO=https://downloads.xiph.org/releases/vorbis/libvorbis-1.3.7.tar.gz

RUN cd /opt/build && \
    wget -O - ${LIBVORBIS_REPO} | tar xz && \
    cd libvorbis-1.3.7 && \
    ./configure --prefix=/usr/local --libdir=/usr/local/lib --enable-shared && \
    make -j$(nproc) && \
    make install DESTDIR=/opt/dist && \
    make install

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates wget g++ autoconf libtool autotools-dev automake make && \
  rm -rf /var/lib/apt/lists/*

ARG LIBFDKAAC_REPO=https://github.com/mstorsjo/fdk-aac/archive/v0.1.6.tar.gz
RUN cd /opt/build && \
    wget -O - ${LIBFDKAAC_REPO} | tar xz && \
    cd fdk-aac-0.1.6 && \
    ./autogen.sh && \
    ./configure --prefix=/usr/local --libdir=/usr/local/lib --enable-shared && \
    make -j$(nproc) && \
    make install DESTDIR=/opt/dist && \
    make install

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates wget autoconf libtool make && \
  rm -rf /var/lib/apt/lists/*

ARG LIBOPUS_REPO=https://archive.mozilla.org/pub/opus/opus-1.3.1.tar.gz
RUN cd /opt/build && \
    wget -O - ${LIBOPUS_REPO} | tar xz && \
    cd opus-1.3.1 && \
    ./configure --prefix=/usr/local --libdir=/usr/local/lib --enable-shared && \
    make -j$(nproc) && \
    make install DESTDIR=/opt/dist && \
    make install

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates wget tar g++ make bzip2 && \
  rm -rf /var/lib/apt/lists/*

ARG NASM_REPO=https://www.nasm.us/pub/nasm/releasebuilds/2.15.05/nasm-2.15.05.tar.bz2
RUN cd /opt/build && \
    wget -O - ${NASM_REPO} | tar xj && \
    cd nasm-2.15.05 && \
    ./autogen.sh && \
    ./configure --prefix=/usr/local --libdir=/usr/local/lib && \
     make -j$(nproc) && \
     make install

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    git cmake make autoconf && \
  rm -rf /var/lib/apt/lists/*

ARG LIBVPX_REPO=https://chromium.googlesource.com/webm/libvpx.git
RUN cd /opt/build && \
    git clone ${LIBVPX_REPO} -b v1.8.2 --depth 1 && \
    cd libvpx && \
    ./configure --prefix=/usr/local --libdir=/usr/local/lib --enable-shared --disable-examples --disable-unit-tests --enable-vp9-highbitdepth --as=nasm && \
    make -j$(nproc) && \
    make install DESTDIR=/opt/dist && \
    make install

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    git cmake make && \
  rm -rf /var/lib/apt/lists/*

ARG LIBAOM_REPO=https://aomedia.googlesource.com/aom
RUN cd /opt/build && \
    git clone ${LIBAOM_REPO} -b v2.0.0 --depth 1 && \
    cd aom/build && \
    cmake -DBUILD_SHARED_LIBS=ON -DENABLE_NASM=ON -DENABLE_TESTS=OFF -DENABLE_DOCS=OFF -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_INSTALL_LIBDIR=lib .. && \
    make -j$(nproc) && \
    make install DESTDIR=/opt/dist && \
    make install

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    git cmake make autoconf && \
  rm -rf /var/lib/apt/lists/*

ARG LIBX264_REPO=https://github.com/mirror/x264
RUN cd /opt/build && \
    git clone ${LIBX264_REPO} -b stable --depth 1 && \
    cd x264 && \
    ./configure --prefix=/usr/local --libdir=/usr/local/lib --enable-shared && \
    make -j$(nproc) && \
    make install DESTDIR=/opt/dist && \
    make install

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates wget tar g++ make && \
  rm -rf /var/lib/apt/lists/*
ARG YASM_REPO=https://github.com/OpenVisualCloud/Dockerfiles-Resources/raw/master/yasm-1.3.0.tar.gz
RUN cd /opt/build && \
    wget -O - ${YASM_REPO} | tar xz
RUN cd /opt/build/yasm-1.3.0 && \
    # TODO remove the line below whether no other component inside this project requires it.
    # `sed -i "s/) ytasm.*/)/" Makefile.in' && \
    ./configure --prefix=/usr/local --libdir=/usr/local/lib && \
    make -j $(nproc) && \
    make install

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    libnuma-dev cmake make && \
  rm -rf /var/lib/apt/lists/*

ARG LIBX265_REPO=https://github.com/videolan/x265/archive/3.3.tar.gz
RUN cd /opt/build && \
    wget -O - ${LIBX265_REPO} | tar xz && \
    cd x265-3.3/build/linux && \
    cmake -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=/usr/local -DLIB_INSTALL_DIR=/usr/local/lib ../../source && \
    make -j$(nproc) && \
    make install DESTDIR=/opt/dist && \
    make install

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    python3-setuptools && \
  rm -rf /var/lib/apt/lists/*
ARG MESON_REPO=https://github.com/mesonbuild/meson
RUN git clone ${MESON_REPO}; \
    cd meson; \
    git checkout 0.53.1; \
    python3 setup.py install;

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates meson tar g++ wget pkg-config && \
  rm -rf /var/lib/apt/lists/*
ARG DAV1D_REPO=https://code.videolan.org/videolan/dav1d/-/archive/0.7.1/dav1d-0.7.1.tar.gz
RUN cd /opt/build && \
  wget -O - ${DAV1D_REPO} | tar xz
RUN cd /opt/build/dav1d-0.7.1 && \
  meson build --prefix=/usr/local --libdir /usr/local/lib --buildtype=plain && \
  cd build && \
  ninja install && \
  DESTDIR=/opt/dist ninja install

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates wget tar g++ make cmake git && \
  rm -rf /var/lib/apt/lists/*
ARG SVT_HEVC_REPO=https://github.com/OpenVisualCloud/SVT-HEVC
RUN cd /opt/build && \
    git clone ${SVT_HEVC_REPO}
RUN cd /opt/build/SVT-HEVC/Build/linux && \
    git checkout v1.5.0 && \
    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_INSTALL_LIBDIR=/usr/local/lib -DCMAKE_ASM_NASM_COMPILER=yasm ../.. && \
    make -j $(nproc) && \
    make install DESTDIR=/opt/dist && \
    make install

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates wget tar g++ make cmake git && \
  rm -rf /var/lib/apt/lists/*
ARG SVT_AV1_REPO=https://github.com/AOMediaCodec/SVT-AV1
RUN cd /opt/build && \
    git clone ${SVT_AV1_REPO} -b v0.8.5 --depth 1 && \
    cd SVT-AV1/Build/linux && \
    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_INSTALL_LIBDIR=/usr/local/lib -DCMAKE_ASM_NASM_COMPILER=yasm ../.. && \
    make -j $(nproc) && \
    sed -i 's/SvtAv1dec/SvtAv1Dec/' SvtAv1Dec.pc && \
    make install DESTDIR=/opt/dist && \
    make install

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates wget tar g++ make cmake git && \
  rm -rf /var/lib/apt/lists/*
ARG SVT_VP9_REPO=https://github.com/OpenVisualCloud/SVT-VP9
RUN cd /opt/build && \
    git clone ${SVT_VP9_REPO} -b v0.2.1 --depth 1 && \
    cd SVT-VP9/Build/linux && \
    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_INSTALL_LIBDIR=/usr/local/lib -DCMAKE_ASM_NASM_COMPILER=yasm ../.. && \
    make -j $(nproc) && \
    make install DESTDIR=/opt/dist && \
    make install 

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates cmake g++ make wget && \
  rm -rf /var/lib/apt/lists/*
ARG GMMLIB_REPO=https://github.com/VCDP/gmmlib/archive/intel-media-sg1-pv1.1.tar.gz
RUN cd /opt/build && \
  wget -O - ${GMMLIB_REPO} | tar xz
RUN cd /opt/build/gmmlib-intel-media-sg1-pv1.1 && mkdir build && cd build && \
  cmake -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_INSTALL_LIBDIR=/usr/local/lib .. && \
  make -j$(nproc) && \
  make install DESTDIR=/opt/dist && \
  make install

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    automake ca-certificates gcc libdrm-dev libtool make pkg-config wget libx11-dev libxext-dev libxfixes-dev libwayland-dev && \
  rm -rf /var/lib/apt/lists/*
ARG LIBVA2_REPO=https://github.com/VCDP/libva/archive/intel-media-sg1-pv1.1.tar.gz
RUN cd /opt/build && \
  wget -O - ${LIBVA2_REPO} | tar xz
RUN cd /opt/build/libva-intel-media-sg1-pv1.1 && \
  ./autogen.sh --prefix=/usr/local --libdir=/usr/local/lib && \
  make -j$(nproc) && \
  make install DESTDIR=/opt/dist && \
  make install

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates cmake g++ libpciaccess-dev make pkg-config wget && \
  rm -rf /var/lib/apt/lists/*
ARG MEDIA_DRIVER_REPO=https://github.com/VCDP/media-driver/archive/intel-media-sg1-pv1.1.tar.gz
RUN cd /opt/build && \
  wget -O - ${MEDIA_DRIVER_REPO} | tar xz
RUN cd /opt/build/media-driver-intel-media-sg1-pv1.1 && mkdir build && cd build && \
  cmake -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_INSTALL_LIBDIR=/usr/local/lib -DENABLE_PRODUCTION_KMD=ON .. && \
  make -j$(nproc) && \
  make install DESTDIR=/opt/dist && \
  make install 

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates gcc g++ make cmake pkg-config wget && \
  rm -rf /var/lib/apt/lists/*
ARG MSDK_REPO=https://github.com/VCDP/MediaSDK/archive/intel-media-sg1-pv1.1.tar.gz
RUN cd /opt/build && \
  wget -O - ${MSDK_REPO} | tar xz
RUN cd /opt/build/MediaSDK-intel-media-sg1-pv1.1 && \
  mkdir -p build && cd build && \
  cmake \
    -DCMAKE_INSTALL_PREFIX=/usr/local \
    -DCMAKE_INSTALL_LIBDIR=/usr/local/lib \
    -DBUILD_SAMPLES=no \
    -DBUILD_TUTORIALS=OFF \
    .. && \
  make -j$(nproc) && \
  make install DESTDIR=/opt/dist && \
  make install 

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates wget patch libv4l-dev libass-dev  && \
  rm -rf /var/lib/apt/lists/*

ARG FFMPEG_REPO=https://github.com/FFmpeg/FFmpeg/archive/n4.2.2.tar.gz
RUN cd /opt/build && \
    wget -O - ${FFMPEG_REPO} | tar xz


ARG FFMPEG_PATCH_SVT_AV1_REPO=https://github.com/AOMediaCodec/SVT-AV1/archive/v0.8.4.tar.gz
RUN cd /opt/build && \
    wget -O - ${FFMPEG_PATCH_SVT_AV1_REPO} | tar xz && \
    cd /opt/build/FFmpeg-n4.2.2 && \
    patch -p1 < ../SVT-AV1-0.8.4/ffmpeg_plugin/0001-Add-ability-for-ffmpeg-to-run-svt-av1.patch || true

RUN cd /opt/build/FFmpeg-n4.2.2 && \
    patch -p1 < /opt/build/SVT-HEVC/ffmpeg_plugin/0001-lavc-svt_hevc-add-libsvt-hevc-encoder-wrapper.patch || true

RUN cd /opt/build/FFmpeg-n4.2.2 && \
    patch -p1 < ../SVT-VP9/ffmpeg_plugin/0001-Add-ability-for-ffmpeg-to-run-svt-vp9.patch || true

RUN cd /opt/build/FFmpeg-n4.2.2 && \
    ./configure --prefix=/usr/local --libdir=/usr/local/lib --enable-shared --disable-static --disable-doc --disable-htmlpages \
    --disable-manpages --disable-podpages --disable-txtpages \
    --enable-gpl     --enable-nonfree     --enable-libass     --enable-libfreetype     --disable-xlib --disable-sdl2         --enable-libmfx     --enable-vaapi     --enable-libv4l2 --enable-indev=v4l2         --enable-libfdk-aac     --enable-libopus     --enable-libvpx     --enable-libvorbis     --enable-libx264     --enable-libx265     --enable-libsvtav1     --enable-libsvthevc     --enable-libsvtvp9     --enable-libaom     --enable-libdav1d     && make -j$(nproc) && \
    make install DESTDIR=/opt/dist && \
    make install

RUN echo "Start cleanup" && \
    rm -rf /opt/dist//usr/local/include && \
    rm -rf /opt/dist//usr/local/share/doc && \
    rm -rf /opt/dist//usr/local/share/gtk-doc && \
    rm -rf /opt/dist//usr/local/share/man && \
    ( find /opt/dist -name "*.a" -exec rm -f {} \; ) && \
    echo "Cleanup done"

FROM ubuntu:18.04
LABEL Description="This is the base image for Gstreamer ubuntu 18.04"
LABEL Vendor="Intel Corporation"
WORKDIR /home

# Install
RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    libnuma1 libdrm2 libx11-6 libxext6 libxfixes3 libwayland-client0 libpciaccess0 libass9 libv4l-0  && \
  rm -rf /var/lib/apt/lists/*

COPY --from=build /opt/dist /
RUN echo "/usr/local/lib" >> /etc/ld.so.conf.d/all-libs.conf && ldconfig


