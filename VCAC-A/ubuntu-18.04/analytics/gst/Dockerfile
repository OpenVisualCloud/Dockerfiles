
# BSD 3-Clause License
#
# Copyright (c) 2021, Intel Corporation
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# This file is automatically generated from .m4 template.
# To update, modify the template and regenerate.
FROM ubuntu:18.04 AS build


RUN mkdir -p /opt/build && mkdir -p /opt/dist

ENV PKG_CONFIG_PATH=/usr/local/lib/pkgconfig

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    g++ ca-certificates wget make libcurl4-gnutls-dev zlib1g-dev && \
  rm -rf /var/lib/apt/lists/*

# build cmake
ARG CMAKE_REPO=https://cmake.org/files
RUN cd /opt/build && \
    wget -O - ${CMAKE_REPO}/v3.20/cmake-3.20.3.tar.gz | tar xz && \
    cd cmake-3.20.3 && \
    ./bootstrap --prefix=/usr/local --system-curl && \
    make -j$(nproc) && \
    make install

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates wget make autoconf automake g++ && \
  rm -rf /var/lib/apt/lists/*

# build libogg
ARG OGG_VER=1.3.5
ARG LIBOGG_REPO=https://github.com/xiph/ogg/releases/download/v${OGG_VER}/libogg-1.3.5.tar.gz

RUN cd /opt/build && \
    wget -O - ${LIBOGG_REPO} | tar xz && \
    cd libogg-1.3.5 && \
    ./configure --prefix=/usr/local --libdir=/usr/local/lib --enable-shared && \
    make -j$(nproc) && \
    make install DESTDIR=/opt/dist && \
    make install

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates wget make autoconf automake && \
  rm -rf /var/lib/apt/lists/*

# build libvorbis
ARG VORBIS_VER=1.3.7
ARG LIBVORBIS_REPO=https://github.com/xiph/vorbis/releases/download/v${VORBIS_VER}/libvorbis-1.3.7.tar.gz
RUN cd /opt/build && \
    wget -O - ${LIBVORBIS_REPO} | tar xz && \
    cd libvorbis-1.3.7 && \
    ./configure --prefix=/usr/local --libdir=/usr/local/lib --enable-shared && \
    make -j$(nproc) && \
    make install DESTDIR=/opt/dist && \
    make install

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates wget g++ autoconf libtool autotools-dev automake make && \
  rm -rf /var/lib/apt/lists/*

# build libfdkaac
ARG LIBFDKAAC_REPO=https://github.com/mstorsjo/fdk-aac/archive/v2.0.2.tar.gz
RUN cd /opt/build && \
    wget -O - ${LIBFDKAAC_REPO} | tar xz && \
    cd fdk-aac-2.0.2 && \
    ./autogen.sh && \
    ./configure --prefix=/usr/local --libdir=/usr/local/lib --enable-shared && \
    make -j$(nproc) && \
    make install DESTDIR=/opt/dist && \
    make install

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates wget autoconf libtool make && \
  rm -rf /var/lib/apt/lists/*

# build libopus
ARG LIBOPUS_REPO=https://archive.mozilla.org/pub/opus/opus-1.3.1.tar.gz
RUN cd /opt/build && \
    wget -O - ${LIBOPUS_REPO} | tar xz && \
    cd opus-1.3.1 && \
    ./configure --prefix=/usr/local --libdir=/usr/local/lib --enable-shared && \
    make -j$(nproc) && \
    make install DESTDIR=/opt/dist && \
    make install

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates wget tar g++ make bzip2 && \
  rm -rf /var/lib/apt/lists/*

# build nasm
ARG NASM_REPO=https://www.nasm.us/pub/nasm/releasebuilds/2.15.05/nasm-2.15.05.tar.bz2
RUN cd /opt/build && \
    wget -O - ${NASM_REPO} | tar xj && \
    cd nasm-2.15.05 && \
    ./autogen.sh && \
    ./configure --prefix=/usr/local --libdir=/usr/local/lib && \
     make -j$(nproc) && \
     make install

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    git make autoconf && \
  rm -rf /var/lib/apt/lists/*

# build libvpx
ARG LIBVPX_REPO=https://chromium.googlesource.com/webm/libvpx.git
RUN cd /opt/build && \
    git clone ${LIBVPX_REPO} -b v1.10.0 --depth 1 && \
    cd libvpx && \
    ./configure --prefix=/usr/local --libdir=/usr/local/lib --enable-shared --disable-examples --disable-unit-tests --enable-vp9-highbitdepth --as=nasm && \
    make -j$(nproc) && \
    make install DESTDIR=/opt/dist && \
    make install

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    git make && \
  rm -rf /var/lib/apt/lists/*

# build libaom
ARG LIBAOM_REPO=https://aomedia.googlesource.com/aom
RUN cd /opt/build && \
    git clone ${LIBAOM_REPO} -b v3.1.1 --depth 1 && \
    cd aom/build && \
    cmake -DBUILD_SHARED_LIBS=ON -DENABLE_NASM=ON -DENABLE_TESTS=OFF -DENABLE_DOCS=OFF -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_INSTALL_LIBDIR=lib .. && \
    make -j$(nproc) && \
    make install DESTDIR=/opt/dist && \
    make install

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    git make autoconf && \
  rm -rf /var/lib/apt/lists/*

# build libx264
ARG LIBX264_REPO=https://github.com/mirror/x264
RUN cd /opt/build && \
    git clone ${LIBX264_REPO} -b stable --depth 1 && \
    cd x264 && \
    ./configure --prefix=/usr/local --libdir=/usr/local/lib \
        --enable-shared && \
    make -j$(nproc) && \
    make install DESTDIR=/opt/dist && \
    make install

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates wget tar g++ make && \
  rm -rf /var/lib/apt/lists/*

# build yasm
ARG YASM_REPO=https://www.tortall.net/projects/yasm/releases/yasm-1.3.0.tar.gz
RUN cd /opt/build && \
    wget -O - ${YASM_REPO} | tar xz
RUN cd /opt/build/yasm-1.3.0 && \
    # TODO remove the line below whether no other component inside this project requires it.
    # `sed -i "s/) ytasm.*/)/" Makefile.in' && \
    ./configure --prefix=/usr/local --libdir=/usr/local/lib && \
    make -j $(nproc) && \
    make install

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    libnuma-dev make && \
  rm -rf /var/lib/apt/lists/*

# build libx265
ARG LIBX265_REPO=https://github.com/videolan/x265/archive/3.4.tar.gz
RUN cd /opt/build && \
    wget -O - ${LIBX265_REPO} | tar xz && \
    cd x265-3.4/build/linux && \
    cmake -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=/usr/local -DLIB_INSTALL_DIR=/usr/local/lib ../../source && \
    make -j$(nproc) && \
    make install DESTDIR=/opt/dist && \
    make install

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    python3-pip ninja-build python3-setuptools && \
  rm -rf /var/lib/apt/lists/*

# build meson
ARG MESON_REPO=https://github.com/mesonbuild/meson
RUN git clone ${MESON_REPO}; \
    cd meson; \
    git checkout 0.58.1; \
    python3 setup.py install;

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates tar g++ wget pkg-config && \
  rm -rf /var/lib/apt/lists/*

# build dav1d
ARG DAV1D_REPO=https://code.videolan.org/videolan/dav1d/-/archive/0.9.0/dav1d-0.9.0.tar.gz
RUN cd /opt/build && \
  wget -O - ${DAV1D_REPO} | tar xz
RUN cd /opt/build/dav1d-0.9.0 && \
  meson build --prefix=/usr/local --libdir /usr/local/lib --buildtype=plain && \
  cd build && \
  ninja install && \
  DESTDIR=/opt/dist ninja install

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates g++ make wget && \
  rm -rf /var/lib/apt/lists/*

# build gmmlib
ARG GMMLIB_REPO=https://github.com/intel/gmmlib/archive/intel-gmmlib-21.1.3.tar.gz
RUN cd /opt/build && \
  wget -O - ${GMMLIB_REPO} | tar xz
RUN cd /opt/build/gmmlib-intel-gmmlib-21.1.3 && mkdir build && cd build && \
  cmake -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_INSTALL_LIBDIR=/usr/local/lib .. && \
  make -j$(nproc) && \
  make install DESTDIR=/opt/dist && \
  make install

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    automake ca-certificates gcc libdrm-dev libtool make pkg-config wget libx11-dev libxext-dev libxfixes-dev libwayland-dev && \
  rm -rf /var/lib/apt/lists/*

# build libva2
ARG LIBVA2_REPO=https://github.com/intel/libva/archive/2.11.0.tar.gz
RUN cd /opt/build && \
  wget -O - ${LIBVA2_REPO} | tar xz
RUN cd /opt/build/libva-2.11.0 && \
  ./autogen.sh --prefix=/usr/local --libdir=/usr/local/lib && \
  make -j$(nproc) && \
  make install DESTDIR=/opt/dist && \
  make install

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates wget && \
  rm -rf /var/lib/apt/lists/*

# build opencl
ARG OPENCL_GMMLIB_REPO=https://github.com/intel/compute-runtime/releases/download/21.23.20043/intel-gmmlib_21.1.3_amd64.deb
ARG OPENCL_IGC_CORE_REPO=https://github.com/intel/intel-graphics-compiler/releases/download/igc-1.0.7423/intel-igc-core_1.0.7423_amd64.deb
ARG OPENCL_IGC_OCL_REPO=https://github.com/intel/intel-graphics-compiler/releases/download/igc-1.0.7423/intel-igc-opencl_1.0.7423_amd64.deb
ARG OPENCL_INTEL_OCL_REPO=https://github.com/intel/compute-runtime/releases/download/21.23.20043/intel-opencl_21.23.20043_amd64.deb

RUN mkdir -p /opt/build/opencl && \
    cd /opt/build/opencl && \
    wget ${OPENCL_GMMLIB_REPO} ${OPENCL_IGC_CORE_REPO} ${OPENCL_IGC_OCL_REPO} ${OPENCL_INTEL_OCL_REPO} && \
    dpkg -i ./*.deb && \
    for x in *.deb; do dpkg-deb -x $x /opt/dist/usr/local; done

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates g++ libpciaccess-dev make pkg-config wget && \
  rm -rf /var/lib/apt/lists/*

# build media driver
ARG MEDIA_DRIVER_REPO=https://github.com/intel/media-driver/archive/intel-media-21.1.3.tar.gz
RUN cd /opt/build && \
  wget -O - ${MEDIA_DRIVER_REPO} | tar xz
RUN cd /opt/build/media-driver-intel-media-21.1.3 && mkdir build && cd build && \
  cmake -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_INSTALL_LIBDIR=/usr/local/lib -DENABLE_PRODUCTION_KMD=OFF .. && \
  make -j$(nproc) && \
  make install DESTDIR=/opt/dist && \
  make install

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    cpio libjson-c-dev && \
  rm -rf /var/lib/apt/lists/*

# Install OpenVINO - Closed source dldt
ARG OPENVINO_REPO=http://registrationcenter-download.intel.com/akdlm/irc_nas/17662/l_openvino_toolkit_p_2021.3.394.tgz

#Download and unpack OpenVino
RUN mkdir /opt/build/openvino
RUN wget ${OPENVINO_REPO} -P /opt/build/openvino
RUN if [ -f /opt/build/openvino/l_openvino_toolkit_p_2021.3.394.tgz ]; \
    then tar xzvf /opt/build/openvino/l_openvino_toolkit_p_2021.3.394.tgz -C /opt/build/openvino && rm /opt/build/openvino/l_openvino_toolkit_p_2021.3.394.tgz; \
    else echo "Please prepare the OpenVino installation bundle"; \
fi

# Create a silent configuration file for install
RUN echo "ACCEPT_EULA=accept" > /opt/build/openvino/silent.cfg                        && \
    echo "CONTINUE_WITH_OPTIONAL_ERROR=yes" >> /opt/build/openvino/silent.cfg         && \
    echo "PSET_INSTALL_DIR=/opt/intel" >> /opt/build/openvino/silent.cfg              && \
    echo "CONTINUE_WITH_INSTALLDIR_OVERWRITE=yes" >> /opt/build/openvino/silent.cfg   && \
    echo "COMPONENTS=DEFAULTS" >> /opt/build/openvino/silent.cfg                      && \
    echo "COMPONENTS=ALL" >> /opt/build/openvino/silent.cfg                           && \
    echo "PSET_MODE=install" >> /opt/build/openvino/silent.cfg                        && \
    echo "INTEL_SW_IMPROVEMENT_PROGRAM_CONSENT=no" >> /opt/build/openvino/silent.cfg  && \
    echo "SIGNING_ENABLED=no" >> /opt/build/openvino/silent.cfg

#Install OpenVino
RUN /opt/build/openvino/l_openvino_toolkit_p_2021.3.394/install.sh --ignore-signature --cli-mode -s /opt/build/openvino/silent.cfg && rm -rf /opt/build/openvino

#Create symlink to assure compatibility with components
RUN cd /opt/intel/      &&\
    ln -s openvino_2021 openvino

ARG OPENVINO_IE_DIR=/opt/intel/openvino/deployment_tools/inference_engine

ENV IE_PLUGINS_PATH=${OPENVINO_IE_DIR}/lib/intel64
ENV HDDL_INSTALL_DIR=${OPENVINO_IE_DIR}/external/hddl
ENV InferenceEngine_DIR=${OPENVINO_IE_DIR}/share
ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/intel/openvino/deployment_tools/ngraph/lib:/opt/intel/opencl:$HDDL_INSTALL_DIR/lib:${OPENVINO_IE_DIR}/external/gna/lib:${OPENVINO_IE_DIR}/external/mkltiny_lnx/lib:${OPENVINO_IE_DIR}/external/omp/lib:${OPENVINO_IE_DIR}/external/tbb/lib:/opt/intel/openvino/openvx/lib:$IE_PLUGINS_PATH

#Remove components of OpenVino that are not needed
ARG CV_BASE_DIR=/opt/intel/openvino
RUN rm -rf ${CV_BASE_DIR}/uninstall* && \
    rm -rf ${CV_BASE_DIR}/python && \
    rm -rf ${CV_BASE_DIR}/documentation && \
    rm -rf ${CV_BASE_DIR}/install_dependiencies && \
    rm -rf ${CV_BASE_DIR}/openvino_toolkit_uninstaller && \
    rm -rf ${CV_BASE_DIR}/deployment_tools/demo && \
    rm -rf ${CV_BASE_DIR}/deployment_tools/intel_models && \
    rm -rf ${CV_BASE_DIR}/deployment_tools/model_optimizer && \
    rm -rf ${CV_BASE_DIR}/deployment_tools/tools && \
    rm -rf ${CV_BASE_DIR}/deployment_tools/inference_engine/samples && \
    rm -rf ${CV_BASE_DIR}/openvx/samples && \
    rm -rf ${CV_BASE_DIR}/opencv/samples

#Copy over directories to run image
RUN mkdir -p /opt/dist/opt/intel && \
    cp -rH /opt/intel/openvino /opt/dist/opt/intel/



ARG LIBJSONC_REPO=https://github.com/json-c/json-c/archive/json-c-0.15-20200726.tar.gz
RUN cd /opt/build && \
    wget -O - ${LIBJSONC_REPO} | tar xz && \
    cd json-c-json-c-0.15-20200726 && mkdir build && cd build && \
    cmake -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_INSTALL_LIBDIR=/usr/local/lib .. && \
    make -j$(nproc) && \
    make install DESTDIR=/opt/dist && \
    make install



ARG KAFKA_VER=1.7.0
ARG LIBRDKAFKA_REPO=https://github.com/edenhill/librdkafka/archive/v${KAFKA_VER}.tar.gz
RUN cd /opt/build && \
    wget -O - ${LIBRDKAFKA_REPO} | tar xz && \
    cd librdkafka-1.7.0 && \
    ./configure --prefix=/usr/local --libdir=/usr/local/lib && \
    make -j$(nproc) && \
    make install DESTDIR=/opt/dist && \
    make install

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates gcc g++ make wget python3-numpy ccache libeigen3-dev && \
  rm -rf /var/lib/apt/lists/*

# build opencv
ARG OPENCV_REPO=https://github.com/opencv/opencv/archive/4.5.2.tar.gz
RUN cd /opt/build && \
  wget -O - ${OPENCV_REPO} | tar xz
# TODO: file a bug against opencv since they do not accept full libdir
RUN cd /opt/build/opencv-4.5.2 && mkdir build && cd build && \
  cmake \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=/usr/local \
    -DCMAKE_INSTALL_LIBDIR=lib \
    -DOPENCV_GENERATE_PKGCONFIG=ON \
    -DBUILD_DOCS=OFF \
    -DBUILD_EXAMPLES=OFF \
    -DBUILD_PERF_TESTS=OFF \
    -DBUILD_TESTS=OFF \
    .. && \
  make -j $(nproc) && \
  make install DESTDIR=/opt/dist && \
  make install

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates tar g++ wget pkg-config libglib2.0-dev flex bison gobject-introspection libgirepository1.0-dev && \
  rm -rf /var/lib/apt/lists/*

# build gst-core
ARG GSTCORE_REPO=https://github.com/GStreamer/gstreamer/archive/1.19.1.tar.gz
RUN cd /opt/build && \
    wget -O - ${GSTCORE_REPO} | tar xz
RUN cd /opt/build/gstreamer-1.19.1 && \
    meson build --libdir=/usr/local/lib --libexecdir=/usr/local/lib \
    --prefix=/usr/local --buildtype=plain \
    -Dbenchmarks=disabled \
    -Dexamples=disabled \
    -Dtests=disabled \
    -Ddoc=disabled \
    -Dintrospection=enabled \
    -Dgtk_doc=disabled && \
    cd build && \
    ninja install && \
    DESTDIR=/opt/dist ninja install

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates tar g++ gobjc wget pkg-config libglib2.0-dev flex bison gobject-introspection libgirepository1.0-dev libx11-dev libxv-dev libxt-dev libasound2-dev libpango1.0-dev libtheora-dev libvisual-0.4-dev libgl1-mesa-dev libx11-xcb-dev && \
  rm -rf /var/lib/apt/lists/*

# build gst-plugin-base
ARG GSTBASE_REPO=https://github.com/GStreamer/gst-plugins-base/archive/1.19.1.tar.gz
RUN cd /opt/build && \
  wget -O - ${GSTBASE_REPO} | tar xz
RUN cd /opt/build/gst-plugins-base-1.19.1 && \
  meson build \
    --prefix=/usr/local \
    --libdir=/usr/local/lib \
    --libexecdir=/usr/local/lib \
    --buildtype=plain \
    -Dexamples=disabled \
    -Dtests=disabled \
    -Ddoc=disabled \
    -Dintrospection=enabled \
    -Dgtk_doc=disabled \
    -Dalsa=enabled \
    -Dpango=enabled \
    -Dtheora=enabled \
    -Dlibvisual=enabled \
    -Dgl=enabled \
  && cd build && \
  ninja install && \
  DESTDIR=/opt/dist ninja install

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    git ca-certificates tar g++ wget pkg-config libglib2.0-dev flex bison libx11-dev libxv-dev libxt-dev libgdk-pixbuf2.0-dev libjpeg-turbo8-dev libpng-dev zlib1g-dev libsoup2.4-dev  && \
  rm -rf /var/lib/apt/lists/*

# build gst-plugin-good
ARG GSTGOOD_REPO=https://github.com/GStreamer/gst-plugins-good/archive/1.19.1.tar.gz
RUN cd /opt/build && \
    wget -O - ${GSTGOOD_REPO} | tar xz
RUN cd /opt/build/gst-plugins-good-1.19.1 && \
    meson build --libdir=/usr/local/lib --libexecdir=/usr/local/lib \
    --prefix=/usr/local --buildtype=plain \
    -Dexamples=disabled \
    -Dtests=disabled \
    -Ddoc=disabled \
    -Dgtk_doc=disabled \
    -Dgdk-pixbuf=enabled \
    -Djpeg=enabled \
    -Dpng=enabled \
    -Disomp4=enabled \
    -Dsoup=enabled \
    -Dvpx=enabled \
    && cd build && \
    ninja install && \
    DESTDIR=/opt/dist ninja install

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates tar g++ wget pkg-config libglib2.0-dev flex bison gobject-introspection libgirepository1.0-dev openssl libcurl4-gnutls-dev librtmp-dev mjpegtools libde265-dev  && \
  rm -rf /var/lib/apt/lists/*

# build gst-plugin-bad
ARG GSTBAD_REPO=https://github.com/GStreamer/gst-plugins-bad/archive/1.19.1.tar.gz
RUN cd /opt/build && \
    wget -O - ${GSTBAD_REPO} | tar xz && \
    cd gst-plugins-bad-1.19.1 && \
    meson build \
      --prefix=/usr/local \
      --libdir=/usr/local/lib \
      --libexecdir=/usr/local/lib \
      --buildtype=plain \
      -Ddoc=disabled \
      -Dexamples=disabled \
      -Dgtk_doc=disabled \
      -Dtests=disabled \
      -Dintrospection=enabled \
      -Dgst_player_tests=false \
      -Drtmp=enabled \
      -Dx265=enabled \
      -Drsvg=disabled \
      -Dfdkaac=enabled \
    && cd build && \
    ninja install && \
    DESTDIR=/opt/dist ninja install 

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates tar g++ wget pkg-config libglib2.0-dev flex bison && \
  rm -rf /var/lib/apt/lists/*

# build gst-plugin-ugly
ARG GSTUGLY_REPO=https://github.com/GStreamer/gst-plugins-ugly/archive/1.19.1.tar.gz
RUN cd /opt/build && \
    wget -O - ${GSTUGLY_REPO} | tar xz
RUN cd /opt/build/gst-plugins-ugly-1.19.1 && \
    meson build --libdir=/usr/local/lib --libexecdir=/usr/local/lib \
    --prefix=/usr/local --buildtype=plain \
    -Ddoc=disabled \
    -Dgtk_doc=disabled \
    -Dx264=enabled \
    && cd build && \
    ninja install && \
    DESTDIR=/opt/dist ninja install

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    build-essential ca-certificates wget patch libv4l-dev libass-dev  && \
  rm -rf /var/lib/apt/lists/*

# build ffmpeg
ARG FFMPEG_REPO=https://github.com/FFmpeg/FFmpeg/archive/n4.4.tar.gz
RUN cd /opt/build && \
    wget -O - ${FFMPEG_REPO} | tar xz

#ifdef(`BUILD_SVT_VP9',`FFMPEG_PATCH_SVT_VP9(BUILD_HOME/FFmpeg-FFMPEG_VER)')dnl
#ifdef(`BUILD_DLDT',`FFMPEG_PATCH_ANALYTICS(BUILD_HOME/FFmpeg-FFMPEG_VER)')dnl
#ifdef(`BUILD_OPENVINO',`FFMPEG_PATCH_ANALYTICS(BUILD_HOME/FFmpeg-FFMPEG_VER)')dnl
ARG FFMPEG_PATCH_VAAPI_REPO=https://github.com/OpenVisualCloud/Dockerfiles-Resources/raw/master/ffmpeg-patch-0041-lavc-vaapi_encode_h265-fix-max_transform_hierarchy_d.tar.gz
RUN cd /opt/build && \
    wget -O - ${FFMPEG_PATCH_VAAPI_REPO} | tar xz && \
    cd /opt/build/FFmpeg-n4.4 && \
    patch -p1 < ../0041-lavc-vaapi_encode_h265-fix-max_transform_hierarchy_d.patch || true


ARG FFMPEG_1TN_PATCH_REPO=https://raw.githubusercontent.com/OpenVisualCloud/Dockerfiles-Resources/master/n4.4-enhance_1tn_performance.patch
RUN cd /opt/build/FFmpeg-n4.4 && \
    wget -O - ${FFMPEG_1TN_PATCH_REPO} | patch -p1;

RUN cd /opt/build/FFmpeg-n4.4 && \
    ./configure --prefix=/usr/local --libdir=/usr/local/lib --enable-shared --disable-static --disable-doc --disable-htmlpages \
    --disable-manpages --disable-podpages --disable-txtpages \
    --extra-cflags=-w         --enable-libass     --enable-libfreetype     --disable-xlib --disable-sdl2             --enable-vaapi     --enable-libv4l2 --enable-indev=v4l2         --enable-libfdk-aac     --enable-libopus     --enable-libvpx     --enable-libvorbis     --enable-gpl --enable-libx264     --enable-gpl --enable-libx265             --enable-libaom         --enable-libdav1d     && make -j$(nproc) && \
    make install DESTDIR=/opt/dist && \
    make install

RUN cd /opt/build/opencv-4.5.2/build && \
  rm -rf ./* && \
  cmake \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=/usr/local \
    -DCMAKE_INSTALL_LIBDIR=lib \
    -DOPENCV_GENERATE_PKGCONFIG=ON \
    -DBUILD_DOCS=OFF \
    -DBUILD_EXAMPLES=OFF \
    -DBUILD_PERF_TESTS=OFF \
    -DBUILD_TESTS=OFF \
    .. && \
  cd modules/videoio && \
  make -j $(nproc) && \
  cp -f ../../lib/libopencv_videoio.so.4.5.2 /opt/dist/usr/local/lib

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates tar g++ wget  && \
  rm -rf /var/lib/apt/lists/*

# build gst-plugin-libav
ARG GSTLIBAV_REPO=https://github.com/GStreamer/gst-libav/archive/1.19.1.tar.gz
RUN cd /opt/build && \
    wget -O - ${GSTLIBAV_REPO} | tar xz
RUN cd /opt/build/gst-libav-1.19.1 && \
    meson build --libdir=/usr/local/lib --libexecdir=/usr/local/lib \
    --prefix=/usr/local --buildtype=plain \
    -Dgtk_doc=disabled && \
    cd build && \
    ninja install && \
    DESTDIR=/opt/dist ninja install

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates tar g++ wget pkg-config libdrm-dev libglib2.0-dev libudev-dev flex bison  && \
  rm -rf /var/lib/apt/lists/*

# patch gst-vaapi with gst-video-analytics patch
ARG GST_PLUGIN_VAAPI_PATCH_VER=v1.0.0
ARG GST_PLUGIN_VAAPI_REPO_VIDEO_ANALYTICS=https://github.com/opencv/gst-video-analytics.git

# build gst-plugin-vaapi
ARG GSTVAAPI_REPO=https://github.com/GStreamer/gstreamer-vaapi/archive/1.19.1.tar.gz
RUN cd /opt/build && \
  wget -O - ${GSTVAAPI_REPO} | tar xz

RUN cd /opt/build/gstreamer-vaapi-1.19.1 && \
  git clone ${GST_PLUGIN_VAAPI_REPO_VIDEO_ANALYTICS} && \
  cd gst-video-analytics && git checkout ${GST_PLUGIN_VAAPI_PATCH_VER} && \
  cd .. && \
  git apply gst-video-analytics/patches/gstreamer-vaapi/vasurface_qdata.patch && \
  rm -fr gst-video-analytics

RUN cd /opt/build/gstreamer-vaapi-1.19.1 && \
  meson build \
    --prefix=/usr/local \
    --libdir=/usr/local/lib \
    --libexecdir=/usr/local/lib \
    --buildtype=release \
    -Dgtk_doc=disabled \
    -Dexamples=disabled \
    -Dtests=disabled && \
  cd build && \
  ninja install && \
  DESTDIR=/opt/dist ninja install

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    wget make libssl-dev uuid-dev && \
  rm -rf /var/lib/apt/lists/*

# build libpahomqtt
ARG PAHO_VER=1.3.9
ARG LIBPAHO_REPO=https://github.com/eclipse/paho.mqtt.c/archive/v${PAHO_VER}.tar.gz
RUN cd /opt/build && \
  wget -O - ${LIBPAHO_REPO} | tar -xz
RUN cd /opt/build/paho.mqtt.c-1.3.9 && \
  make	&& \
  make install

#Copy and link in runtime layer
RUN cd /opt/build/paho.mqtt.c-1.3.9 && \
  cp build/output/libpaho-mqtt3c.so.1.3 /opt/dist//usr/local/lib && 	\
  cp build/output/libpaho-mqtt3cs.so.1.3 /opt/dist//usr/local/lib &&   \
  cp build/output/libpaho-mqtt3a.so.1.3 /opt/dist//usr/local/lib &&   \
  cp build/output/libpaho-mqtt3as.so.1.3 /opt/dist//usr/local/lib &&   \
  cp build/output/paho_c_version /opt/dist/usr/local/bin/ && \
  cp build/output/samples/paho_c_pub /opt/dist/usr/local/bin/ && \
  cp build/output/samples/paho_c_sub /opt/dist/usr/local/bin/ && \
  cp build/output/samples/paho_cs_pub /opt/dist/usr/local/bin/ && \
  cp build/output/samples/paho_cs_sub /opt/dist/usr/local/bin/ && \
  chmod 644 /opt/dist//usr/local/lib/libpaho-mqtt3c.so.1.3 && \
  chmod 644 /opt/dist//usr/local/lib/libpaho-mqtt3cs.so.1.3 && \
  chmod 644 /opt/dist//usr/local/lib/libpaho-mqtt3a.so.1.3 && \
  chmod 644 /opt/dist//usr/local/lib/libpaho-mqtt3as.so.1.3 && \
  ln /opt/dist//usr/local/lib/libpaho-mqtt3c.so.1.3 /opt/dist//usr/local/lib/libpaho-mqtt3c.so.1 && \
  ln /opt/dist//usr/local/lib/libpaho-mqtt3cs.so.1.3 /opt/dist//usr/local/lib/libpaho-mqtt3cs.so.1 && \
  ln /opt/dist//usr/local/lib/libpaho-mqtt3a.so.1.3 /opt/dist//usr/local/lib/libpaho-mqtt3a.so.1 && \
  ln /opt/dist//usr/local/lib/libpaho-mqtt3as.so.1.3 /opt/dist//usr/local/lib/libpaho-mqtt3as.so.1 && \
  ln /opt/dist//usr/local/lib/libpaho-mqtt3c.so.1 /opt/dist//usr/local/lib/libpaho-mqtt3c.so && \
  ln /opt/dist//usr/local/lib/libpaho-mqtt3cs.so.1 /opt/dist//usr/local/lib/libpaho-mqtt3cs.so && \
  ln /opt/dist//usr/local/lib/libpaho-mqtt3a.so.1 /opt/dist//usr/local/lib/libpaho-mqtt3a.so && \
  ln /opt/dist//usr/local/lib/libpaho-mqtt3as.so.1 /opt/dist//usr/local/lib/libpaho-mqtt3as.so && \
  cp src/MQTTAsync.h /opt/dist/usr/local/include/ && \
  cp src/MQTTClient.h /opt/dist/usr/local/include/ && \
  cp src/MQTTClientPersistence.h /opt/dist/usr/local/include/ && \
  cp src/MQTTProperties.h /opt/dist/usr/local/include/ && \
  cp src/MQTTReasonCodes.h /opt/dist/usr/local/include/ && \
  cp src/MQTTSubscribeOpts.h /opt/dist/usr/local/include/; 



# Copy gstreamer and dl_streamer libs

ENV LIBRARY_PATH=/usr/local/lib
RUN cp -r /opt/intel/openvino/data_processing/dl_streamer/lib/* /opt/dist/usr/local/lib/gstreamer-1.0

RUN mkdir -p /opt/dist/opt/intel/dl_streamer/python && \
    cp -r /opt/intel/openvino/data_processing/dl_streamer/python/* /opt/dist/opt/intel/dl_streamer/python

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates tar g++ wget gtk-doc-tools uuid-dev python-gi-dev python3-dev libtool-bin libpython3-dev libpython3-stdlib libpython3-all-dev  && \
  rm -rf /var/lib/apt/lists/*
ARG GSTPYTHON_REPO=https://gstreamer.freedesktop.org/src/gst-python/gst-python-1.19.1.tar.xz
RUN cd /opt/build && \
    wget -O - ${GSTPYTHON_REPO} | tar xJ
RUN cd /opt/build/gst-python-1.19.1 && \
#WORKAROUND: https://gitlab.freedesktop.org/gstreamer/gst-python/-/merge_requests/30/diffs

    meson build --libdir=/usr/local/lib --libexecdir=/usr/local/lib \
    --prefix=/usr/local --buildtype=plain \
    -Dpython=/usr/bin/python3 -Dlibpython-dir=/usr/lib/x86_64-linux-gnu/  \
    -Dpygi-overrides-dir=/usr/lib/python3/dist-packages/gi/overrides \
    -Dgtk_doc=disabled && \
    cd build && \
    ninja install && \
    DESTDIR=/opt/dist ninja install


# cleanup
RUN rm -rf /opt/dist/usr/local/include && \
    rm -rf /opt/dist/usr/local/lib/pkgconfig && \
    find /opt/dist -name "*.a" -exec rm -f {} \; || echo ""
RUN rm -rf /opt/dist/usr/local/share/doc /opt/dist/usr/local/share/gtk-doc
RUN rm -rf /opt/dist/usr/local/share/man

FROM ubuntu:18.04
LABEL Description="This is the base image for Gstreamer ubuntu 18.04"
LABEL Vendor="Intel Corporation"
WORKDIR /home

# Install
RUN apt-get update && apt-get upgrade -y systemd
RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    libnuma1 libdrm2 libx11-6 libxext6 libxfixes3 libwayland-client0 libpciaccess0 libusb-1.0-0-dev libboost-filesystem1.65.1 libboost-system1.65.1 libboost-program-options1.65.1 libjson-c3 libglib2.0-0 libxv1 libxt6 libasound2 libpangocairo-1.0-0 libcairo-gobject2 libtheora0 libvisual-0.4-0 libgl1-mesa-dri libgl1-mesa-glx libegl1-mesa libgdk-pixbuf2.0-0 libjpeg-turbo8 libpng16-16 zlib1g libsoup2.4-1 openssl libcurl3-gnutls librtmp1 mjpegtools libde265-0 libxcb-shape0 libxcb-xfixes0 libv4l-0 libass9 python3-numpy python3-gi python3-gi-cairo python3-dev ocl-icd-opencl-dev libglib2.0-dev && \
  rm -rf /var/lib/apt/lists/*

COPY --from=build /opt/dist /
RUN echo "/usr/local/lib" >> /etc/ld.so.conf.d/all-libs.conf && ldconfig

ENV LIBVA_DRIVERS_PATH=/usr/local/lib/dri
ENV LIBVA_DRIVER_NAME=iHD
ENV DISPLAY=:0.0
ENV GST_PLUGIN_PATH=/usr/local/lib/gstreamer-1.0
ENV GST_PLUGIN_SCANNER=/usr/local/lib/gstreamer-1.0/gst-plugin-scanner
ENV GST_VAAPI_ALL_DRIVERS=1

ARG OPENVINO_IE_DIR=/opt/intel/openvino/deployment_tools/inference_engine
ENV IE_PLUGINS_PATH=${OPENVINO_IE_DIR}/lib/intel64
ENV HDDL_INSTALL_DIR=${OPENVINO_IE_DIR}/external/hddl
ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/intel/openvino/deployment_tools/ngraph/lib:/opt/intel/opencl:$HDDL_INSTALL_DIR/lib:/opt/intel/openvino/deployment_tools/inference_engine/external/gna/lib:/opt/intel/openvino/deployment_tools/inference_engine/external/mkltiny_lnx/lib:/opt/intel/openvino/deployment_tools/inference_engine/external/omp/lib:/opt/intel/openvino/deployment_tools/inference_engine/external/tbb/lib:/opt/intel/openvino/openvx/lib:/usr/local/lib:$IE_PLUGINS_PATH
ENV LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/lib/gstreamer-1.0
ENV PKG_CONFIG_PATH=/usr/local/lib/pkgconfig
ENV GST_PLUGIN_PATH=${GST_PLUGIN_PATH}:/usr/local/lib/gstreamer-1.0
ENV PYTHONPATH=${PYTHONPATH}:/opt/intel/dl_streamer/python
ENV GI_TYPELIB_PATH=${GI_TYPELIB_PATH}:/opt/intel/openvino/data_processing/gstreamer/lib/girepository-1.0/


